#include "vex.h"


using namespace vex;


// A global instance of competition
competition Competition;


// define your global instances of motors and other devices here


/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/


void pre_auton(void) {
 // Initializing Robot Configuration. DO NOT REMOVE!
 vexcodeInit();
 shooter.setVelocity(200, velocityUnits::pct);
 shelf.setVelocity(80, velocityUnits::pct);
 intake.setVelocity(70, velocityUnits::pct);
 roller.setVelocity(50, velocityUnits::pct);
 vexcodeInit();
 // :P
  Brain.Screen.drawRectangle(40, 20, 400, 200, blue);
  Brain.Screen.drawCircle(110, 120, 50, white);
  Brain.Screen.drawCircle(110, 145, 25, black);
  Brain.Screen.drawCircle(110, 95, 25, black);
  Brain.Screen.drawCircle(110, 145, 20, white);
  Brain.Screen.drawCircle(110, 95, 20, white);
  Brain.Screen.setPenWidth(10);
  Brain.Screen.drawLine(160, 120, 360, 120);
  Brain.Screen.drawLine(360, 120, 410, 100);
  Brain.Screen.drawLine(360, 120, 410, 140);
  Brain.Screen.drawLine(220, 80, 220, 160);
  wait(1, msec);

 // All activities that occur before the competition starts
 // Example: clearing encoders, setting servo positions, ...
}


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


void autonomous(void) {
  //autonomous w/o roller
  Drivetrain.driveFor(reverse, 600, mm, 60, velocityUnits::pct);
  shooter.spin(forward);
  wait(100, msec);
  shelf.spin(forward);
  wait(900, msec);
  shooter.stop();
  shelf.stop();
  wait(5, msec);
  Drivetrain.driveFor(forward, 1150, mm, 60, velocityUnits::pct);
  Drivetrain.turnFor(right, 113, degrees);
  Drivetrain.driveFor(forward, 80, mm, 20, velocityUnits::pct);
  wait(200, msec);
  roller.spin(forward);
  wait(350, msec);
  roller.stop();
  Drivetrain.driveFor(reverse, 60, mm, 20, velocityUnits::pct);
}


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


void usercontrol(void) {
 // User control code here, inside the loop
 while (1) {
   // This is the main execution loop for the user control program.
   // Each time through the loop your program should update motor + servo
   // values based on feedback from the joysticks.


   // ........................................................................
   // Insert user code here. This is where you use the joystick values to
   // update your motors, etc.
   // ........................................................................


   wait(20, msec); // Sleep the task for a short amount of time to
                   // prevent wasted resources.
 }
}


//
// Main will set up the competition functions and callbacks.
//
int main() {
 // Set up callbacks for autonomous and driver control periods.
 Competition.autonomous(autonomous);
 Competition.drivercontrol(usercontrol);


 // Run the pre-autonomous function.
 pre_auton();


 // Prevent main from exiting with an infinite loop.
 while (true) {
   wait(100, msec);
 }
}
