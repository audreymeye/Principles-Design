#include "vex.h"


using namespace vex;
int Brain_precision = 0, Console_precision = 0;


float myVariable, start, startX, startY, startZ;


event message1 = event();


// "when started" hat block
int whenStarted1() {
 RoboticArm1.setMasteringValues(1715,1935,2072,609);
 RoboticArm1.setToolTipOffset(1.05, 0.0, -1.0);
 startX = 8.0;
 startY = 0.0;
 startZ = 1.4;
 RoboticArm1.moveToPositionLinear(startX, startY, startZ);
 wait(0.5, seconds);
 RoboticArm1.moveToPositionLinear((startX + 2.0), startY, startZ);
 wait(0.5, seconds);
 RoboticArm1.moveToPositionLinear((startX + 2.0), (startY+2.0), startZ);
 wait(0.5, seconds);
  RoboticArm1.moveToPositionLinear((startX), (startY+2.0), startZ);
  wait(0.5, seconds);
   RoboticArm1.moveToPositionLinear(startX, startY, (startZ-0.1));
  wait(0.5, seconds);
  //
  RoboticArm1.moveToPositionLinear((startX - 2.0), startY, (startZ-0.1));
  wait(0.5, seconds);
 RoboticArm1.moveToPositionLinear((startX - 2.0), (startY-2.0), (startZ-0.1));
 wait(0.5, seconds);
  RoboticArm1.moveToPositionLinear((startX), (startY-2.0), (startZ-0.1));
  wait(0.5, seconds);
  RoboticArm1.moveToPositionLinear(startX, startY, startZ);
  return 0;
}


// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
 RoboticArm1.emergencyStop();
}


// "when started" hat block
int whenStarted2() {
 Brain.Screen.setFont(mono60);
 Brain_precision = 3;
 while (true) {
   Brain.Screen.clearScreen();
   // Display the X position on row 1
   Brain.Screen.setCursor(1, 1);
   Brain.Screen.print("X: ");
   Brain.Screen.print(static_cast<float>(RoboticArm1.getAxisPosition(xaxis)));
   Brain.Screen.newLine();
   // Display the Y position on row 2
   Brain.Screen.print("Y: ");
   Brain.Screen.print( static_cast<float>(RoboticArm1.getAxisPosition(yaxis)));
   Brain.Screen.newLine();
   // Display the Z position on row 3
   Brain.Screen.print("Z: ");
   Brain.Screen.print( static_cast<float>(RoboticArm1.getAxisPosition(zaxis)));
   wait(0.2, seconds);
 wait(5, msec);
 }
 return 0;
}




int main() {
 // register event handlers
 EStop.pressed(onevent_EStop_pressed_0);


 wait(15, msec);
 // post event registration


 // set default print color to black
 printf("\033[30m");


 // wait for rotation sensor to fully initialize
 wait(30, msec);


 vex::task ws1(whenStarted2);
 whenStarted1();
}
